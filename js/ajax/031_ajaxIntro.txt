AJAX

AJAX is a developer's dream, because you can:
Read data from a web server - after the page has loaded
Update a web page without reloading the page
Send data to a web server - in the background

AJAX is not a programming language.
AJAX is a technique for accessing web servers from a web page.
AJAX stands for Asynchronous JavaScript And XML.

AJAX = Asynchronous JavaScript And XML.
AJAX is not a programming language.
AJAX just uses a combination of:
A browser built-in XMLHttpRequest object (to request data from a web server)
JavaScript and HTML DOM (to display or use the data)

AJAX is a misleading name. AJAX applications might use XML to transport data, but it is equally common to transport data as plain text or JSON text.

AJAX allows web pages to be updated asynchronously by exchanging data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.

= XMLHttpRequest =
The XMLHttpRequest object can be used to exchange data with a web server behind the scenes. This means that it is possible to update parts of a web page, without reloading the whole page.

= XMLHttpRequest Object Methods = 

new XMLHttpRequest()	              Creates a new XMLHttpRequest object
abort()	                            Cancels the current request
getAllResponseHeaders()	            Returns header information
getResponseHeader()	                Returns specific header information
open(method, url, async, user, psw)	Specifies the request
                                    method: the request type GET or POST
                                    url: the file location
                                    async: true (asynchronous) or false (synchronous)
                                    user: optional user name
                                    psw: optional password
send()                             	Sends the request to the server Used for GET requests
send(string)	                      Sends the request to the server.Used for POST requests
setRequestHeader()                 	Adds a label/value pair to the header to be sent

= XMLHttpRequest Object Properties =

onreadystatechange	Defines a function to be called when the readyState property changes
readyState	        Holds the status of the XMLHttpRequest.
                    0: request not initialized
                    1: server connection established
                    2: request received
                    3: processing request
                    4: request finished and response is ready
responseText	      Returns the response data as a string
responseXML	        Returns the response data as XML data
status	            Returns the status-number of a request
                    200: "OK"
                    403: "Forbidden"
                    404: "Not Found"
statusText         	Returns the status-text (e.g. "OK" or "Not Found")

= Send a Request To a Server =
To send a request to a server, we use the open() and send() methods of the XMLHttpRequest object:

xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();

open(method, url, async)	Specifies the type of request
                          method: the type of request: GET or POST
                          url: the server (file) location
                          async: true (asynchronous) or false (synchronous)
send()                  	Sends the request to the server (used for GET)
send(string)              Sends the request to the server (used for POST)

= GET or POST =
GET is simpler and faster than POST, and can be used in most cases.
However, always use POST requests when:
A cached file is not an option (update a file or database on the server).
Sending a large amount of data to the server (POST has no size limitations).
Sending user input (which can contain unknown characters), POST is more robust and secure than GET.

= GET Requests =

xhttp.open("GET", "demo_get.asp", true);
xhttp.send();

If you want to send information with the GET method, add the information to the URL:

xhttp.open("GET", "demo_get2.asp?fname=Henry&lname=Ford", true);
xhttp.send();


= POST Requests = 
xhttp.open("POST", "demo_post.asp", true);
xhttp.send();

To POST data like an HTML form, add an HTTP header with setRequestHeader(). Specify the data you want to send in the send() method:

xhttp.open("POST", "ajax_test.asp", true);
xhttp.setRequestHeader("Content-type", "application/x-www-form-urlencoded");
xhttp.send("fname=Henry&lname=Ford");


=The onreadystatechange Property =
With the XMLHttpRequest object you can define a function to be executed when the request receives an answer.
The function is defined in the onreadystatechange property of the XMLHttpRequest object:

xhttp.onreadystatechange = function() {
  if (this.readyState == 4 && this.status == 200) {
    document.getElementById("demo").innerHTML = this.responseText;
  }
};
xhttp.open("GET", "ajax_info.txt", true);
xhttp.send();